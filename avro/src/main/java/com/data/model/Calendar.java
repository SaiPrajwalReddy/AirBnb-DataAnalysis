/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.data.model;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Calendar extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Calendar\",\"namespace\":\"com.data.model\",\"fields\":[{\"name\":\"listingId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"date\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"available\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"price\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"adjusted_price\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"minimum_nights\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"maximum_nights\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String listingId;
  @Deprecated public java.lang.String date;
  @Deprecated public java.lang.String available;
  @Deprecated public java.lang.String price;
  @Deprecated public java.lang.String adjusted_price;
  @Deprecated public java.lang.String minimum_nights;
  @Deprecated public java.lang.String maximum_nights;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Calendar() {}

  /**
   * All-args constructor.
   */
  public Calendar(java.lang.String listingId, java.lang.String date, java.lang.String available, java.lang.String price, java.lang.String adjusted_price, java.lang.String minimum_nights, java.lang.String maximum_nights) {
    this.listingId = listingId;
    this.date = date;
    this.available = available;
    this.price = price;
    this.adjusted_price = adjusted_price;
    this.minimum_nights = minimum_nights;
    this.maximum_nights = maximum_nights;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return listingId;
    case 1: return date;
    case 2: return available;
    case 3: return price;
    case 4: return adjusted_price;
    case 5: return minimum_nights;
    case 6: return maximum_nights;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: listingId = (java.lang.String)value$; break;
    case 1: date = (java.lang.String)value$; break;
    case 2: available = (java.lang.String)value$; break;
    case 3: price = (java.lang.String)value$; break;
    case 4: adjusted_price = (java.lang.String)value$; break;
    case 5: minimum_nights = (java.lang.String)value$; break;
    case 6: maximum_nights = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'listingId' field.
   */
  public java.lang.String getListingId() {
    return listingId;
  }

  /**
   * Sets the value of the 'listingId' field.
   * @param value the value to set.
   */
  public void setListingId(java.lang.String value) {
    this.listingId = value;
  }

  /**
   * Gets the value of the 'date' field.
   */
  public java.lang.String getDate() {
    return date;
  }

  /**
   * Sets the value of the 'date' field.
   * @param value the value to set.
   */
  public void setDate(java.lang.String value) {
    this.date = value;
  }

  /**
   * Gets the value of the 'available' field.
   */
  public java.lang.String getAvailable() {
    return available;
  }

  /**
   * Sets the value of the 'available' field.
   * @param value the value to set.
   */
  public void setAvailable(java.lang.String value) {
    this.available = value;
  }

  /**
   * Gets the value of the 'price' field.
   */
  public java.lang.String getPrice() {
    return price;
  }

  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(java.lang.String value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'adjusted_price' field.
   */
  public java.lang.String getAdjustedPrice() {
    return adjusted_price;
  }

  /**
   * Sets the value of the 'adjusted_price' field.
   * @param value the value to set.
   */
  public void setAdjustedPrice(java.lang.String value) {
    this.adjusted_price = value;
  }

  /**
   * Gets the value of the 'minimum_nights' field.
   */
  public java.lang.String getMinimumNights() {
    return minimum_nights;
  }

  /**
   * Sets the value of the 'minimum_nights' field.
   * @param value the value to set.
   */
  public void setMinimumNights(java.lang.String value) {
    this.minimum_nights = value;
  }

  /**
   * Gets the value of the 'maximum_nights' field.
   */
  public java.lang.String getMaximumNights() {
    return maximum_nights;
  }

  /**
   * Sets the value of the 'maximum_nights' field.
   * @param value the value to set.
   */
  public void setMaximumNights(java.lang.String value) {
    this.maximum_nights = value;
  }

  /** Creates a new Calendar RecordBuilder */
  public static com.data.model.Calendar.Builder newBuilder() {
    return new com.data.model.Calendar.Builder();
  }
  
  /** Creates a new Calendar RecordBuilder by copying an existing Builder */
  public static com.data.model.Calendar.Builder newBuilder(com.data.model.Calendar.Builder other) {
    return new com.data.model.Calendar.Builder(other);
  }
  
  /** Creates a new Calendar RecordBuilder by copying an existing Calendar instance */
  public static com.data.model.Calendar.Builder newBuilder(com.data.model.Calendar other) {
    return new com.data.model.Calendar.Builder(other);
  }
  
  /**
   * RecordBuilder for Calendar instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Calendar>
    implements org.apache.avro.data.RecordBuilder<Calendar> {

    private java.lang.String listingId;
    private java.lang.String date;
    private java.lang.String available;
    private java.lang.String price;
    private java.lang.String adjusted_price;
    private java.lang.String minimum_nights;
    private java.lang.String maximum_nights;

    /** Creates a new Builder */
    private Builder() {
      super(com.data.model.Calendar.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.data.model.Calendar.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.listingId)) {
        this.listingId = data().deepCopy(fields()[0].schema(), other.listingId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.date)) {
        this.date = data().deepCopy(fields()[1].schema(), other.date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.available)) {
        this.available = data().deepCopy(fields()[2].schema(), other.available);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.price)) {
        this.price = data().deepCopy(fields()[3].schema(), other.price);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.adjusted_price)) {
        this.adjusted_price = data().deepCopy(fields()[4].schema(), other.adjusted_price);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.minimum_nights)) {
        this.minimum_nights = data().deepCopy(fields()[5].schema(), other.minimum_nights);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.maximum_nights)) {
        this.maximum_nights = data().deepCopy(fields()[6].schema(), other.maximum_nights);
        fieldSetFlags()[6] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Calendar instance */
    private Builder(com.data.model.Calendar other) {
            super(com.data.model.Calendar.SCHEMA$);
      if (isValidValue(fields()[0], other.listingId)) {
        this.listingId = data().deepCopy(fields()[0].schema(), other.listingId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.date)) {
        this.date = data().deepCopy(fields()[1].schema(), other.date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.available)) {
        this.available = data().deepCopy(fields()[2].schema(), other.available);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.price)) {
        this.price = data().deepCopy(fields()[3].schema(), other.price);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.adjusted_price)) {
        this.adjusted_price = data().deepCopy(fields()[4].schema(), other.adjusted_price);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.minimum_nights)) {
        this.minimum_nights = data().deepCopy(fields()[5].schema(), other.minimum_nights);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.maximum_nights)) {
        this.maximum_nights = data().deepCopy(fields()[6].schema(), other.maximum_nights);
        fieldSetFlags()[6] = true;
      }
    }

    /** Gets the value of the 'listingId' field */
    public java.lang.String getListingId() {
      return listingId;
    }
    
    /** Sets the value of the 'listingId' field */
    public com.data.model.Calendar.Builder setListingId(java.lang.String value) {
      validate(fields()[0], value);
      this.listingId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'listingId' field has been set */
    public boolean hasListingId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'listingId' field */
    public com.data.model.Calendar.Builder clearListingId() {
      listingId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'date' field */
    public java.lang.String getDate() {
      return date;
    }
    
    /** Sets the value of the 'date' field */
    public com.data.model.Calendar.Builder setDate(java.lang.String value) {
      validate(fields()[1], value);
      this.date = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'date' field has been set */
    public boolean hasDate() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'date' field */
    public com.data.model.Calendar.Builder clearDate() {
      date = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'available' field */
    public java.lang.String getAvailable() {
      return available;
    }
    
    /** Sets the value of the 'available' field */
    public com.data.model.Calendar.Builder setAvailable(java.lang.String value) {
      validate(fields()[2], value);
      this.available = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'available' field has been set */
    public boolean hasAvailable() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'available' field */
    public com.data.model.Calendar.Builder clearAvailable() {
      available = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'price' field */
    public java.lang.String getPrice() {
      return price;
    }
    
    /** Sets the value of the 'price' field */
    public com.data.model.Calendar.Builder setPrice(java.lang.String value) {
      validate(fields()[3], value);
      this.price = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'price' field has been set */
    public boolean hasPrice() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'price' field */
    public com.data.model.Calendar.Builder clearPrice() {
      price = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'adjusted_price' field */
    public java.lang.String getAdjustedPrice() {
      return adjusted_price;
    }
    
    /** Sets the value of the 'adjusted_price' field */
    public com.data.model.Calendar.Builder setAdjustedPrice(java.lang.String value) {
      validate(fields()[4], value);
      this.adjusted_price = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'adjusted_price' field has been set */
    public boolean hasAdjustedPrice() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'adjusted_price' field */
    public com.data.model.Calendar.Builder clearAdjustedPrice() {
      adjusted_price = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'minimum_nights' field */
    public java.lang.String getMinimumNights() {
      return minimum_nights;
    }
    
    /** Sets the value of the 'minimum_nights' field */
    public com.data.model.Calendar.Builder setMinimumNights(java.lang.String value) {
      validate(fields()[5], value);
      this.minimum_nights = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'minimum_nights' field has been set */
    public boolean hasMinimumNights() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'minimum_nights' field */
    public com.data.model.Calendar.Builder clearMinimumNights() {
      minimum_nights = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'maximum_nights' field */
    public java.lang.String getMaximumNights() {
      return maximum_nights;
    }
    
    /** Sets the value of the 'maximum_nights' field */
    public com.data.model.Calendar.Builder setMaximumNights(java.lang.String value) {
      validate(fields()[6], value);
      this.maximum_nights = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'maximum_nights' field has been set */
    public boolean hasMaximumNights() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'maximum_nights' field */
    public com.data.model.Calendar.Builder clearMaximumNights() {
      maximum_nights = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public Calendar build() {
      try {
        Calendar record = new Calendar();
        record.listingId = fieldSetFlags()[0] ? this.listingId : (java.lang.String) defaultValue(fields()[0]);
        record.date = fieldSetFlags()[1] ? this.date : (java.lang.String) defaultValue(fields()[1]);
        record.available = fieldSetFlags()[2] ? this.available : (java.lang.String) defaultValue(fields()[2]);
        record.price = fieldSetFlags()[3] ? this.price : (java.lang.String) defaultValue(fields()[3]);
        record.adjusted_price = fieldSetFlags()[4] ? this.adjusted_price : (java.lang.String) defaultValue(fields()[4]);
        record.minimum_nights = fieldSetFlags()[5] ? this.minimum_nights : (java.lang.String) defaultValue(fields()[5]);
        record.maximum_nights = fieldSetFlags()[6] ? this.maximum_nights : (java.lang.String) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
